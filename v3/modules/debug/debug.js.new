angular.module('beamng.stuff')
.controller('DebugController', ['$log', '$scope', '$window', 'bngApi', function($log, $scope, $window, bngApi) {
  var vm = this;

  // vm.state = debugState;
  vm.enabled = true;

  vm.vehicleActions = [
    { name: 'Spawn New',          action: function () { bngApi.sendGameEngine('spawnVehicle();') }},
    { name: 'Reset All',          action: function () { bngApi.sendGameEngine('beamNGResetAllVehicles();') }},
    { name: 'Reload All',         action: function () { bngApi.sendGameEngine('beamNGReloadAllVehicles();') }},
    { name: 'Toggle Free Camera', action: function () { bngApi.sendGameEngine('toggleCamera(1);') }}
  ];

  vm.beamVisualization = {

  };


  // $scope.state = {};

  // function tsVariable(varName) {
  //   return function(val) {
  //     tsCodeInternal(varName + '=' + val);
  //   };
  // }

  // function tsFunction(funcName) {
  //   return function(val) {
  //     tsCodeInternal(funcName + '(' + val + ')');
  //   };
  // }

  // function tsCodeInternal(code) {
  //   //console.log(code);
  //   bngApi.sendGameEngine(code + ';');
  // }

  // function tsCode(code) {
  //   return function() {
  //     tsCodeInternal(code);
  //   };
  // }

  // function bdebugUpdate (property) {
  //   return function(value) {
  //     var fakeState = {
  //       changes: ['bdebug'],
  //       bdebug: {}
  //     };
  //     fakeState.bdebug[property] = value;
  //     var sendStr = 'guiUpdate(' + bngApi.serializeToLua(fakeState) + ')';
  //     //console.log(sendStr);
  //     bngApi.sendActiveObjectLua(sendStr);
  //   };
  // }

  // function watch(sVar, func) {
  //   $scope.$watch('state.' + sVar, function(val, oldVal) {
  //     if (val != oldVal) {
  //       func(val, oldVal);
  //     }
  //   });
  // }
  // // global
  //  watch('physicsEnabled', tsFunction('beamNGsetPhysicsEnabled'));
  //  watch('debugEnabled', bdebugUpdate('enabled'));

  // // // renderer
  // watch('renderer.fps', tsCode('toggleFPS(1)'));
  // watch('renderer.boundingboxes', tsVariable('$Scene::renderBoundingBoxes'));
  // watch('renderer.disableShadows', tsVariable('$Shadows::disable'));
  // watch('renderer.wireframe', tsVariable('$gfx::wireframe'));
  // watch('renderer.visualization', function(val, oldVal) {
  //    var vizFuncs = {
  //      'None': function() {
  //        vizFuncs[oldVal]();
  //      },
  //      'Depth': function() {
  //        tsFunction('toggleDepthViz')('');
  //      },
  //      'Normal': function() {
  //        tsFunction('toggleNormalsViz')('');
  //      },
  //      'Light Color': function() {
  //        tsFunction('toggleLightColorViz')('');
  //      },
  //      'Specular': function() {
  //        tsFunction('toggleLightSpecularViz')('');
  //      }
  //    };
  //    vizFuncs[val]();
  // });

  // // // effect
  // watch('effect.fov', tsFunction('setFov'));

  $scope.$on('BdebugUpdate', function (event, newState) {
    $log.debug('[debug.js] received BdebugUpdate:', newState);
  });


  // initial request
  setTimeout(function () {
    bngApi.sendActiveObjectLua('bdebug.requestState()');  
  }, 1000);
  

  // $scope.$watch('state', function(newVal, oldState) {
  //   if($scope.justGotNewState || Object.keys($scope.state).length === 0) return false;
  //   //console.log(bngApi.serializeToLua($scope.state));
  //   bngApi.sendActiveObjectLua('bdebug.setState(' + bngApi.serializeToLua($scope.state) + ')');
  // }, true);
}]);
